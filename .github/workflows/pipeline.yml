name: Deploy Backend to AWS EKS

on:
  push:
    branches:
      - main
      - feat/*
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo-fonte
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm install

      - name: Executar testes e gerar cobertura
        run: npm run test:cov

      - name: Enviar cobertura ao SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          SCANNER_META_PATH="$(pwd)/.scanner-meta.properties"
          npx sonar-scanner \
            -Dsonar.projectKey=tech-snack-fiap-soat-tech-challenge_fastfood-product-service \
            -Dsonar.organization=tech-snack-fiap-soat-tech-challenge \
            -Dsonar.sources=src \
            -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.scanner.metadataFilePath=$SCANNER_META_PATH \
            -Dsonar.coverage.exclusions=**/main.ts,**/configuration.ts,**/*.module.ts,**/*.entity.ts,**/*.enum.ts,**/scripts/**,**/common/exceptions/**,**/common/filters/**,**/common/providers/**

      - name: Validar Quality Gate do SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Aguardando an√°lise do SonarCloud finalizar..."

          PROJECT_KEY="tech-snack-fiap-soat-tech-challenge_fastfood-product-service"
          META_PATH="$(pwd)/.scanner-meta.properties"

          TASK_ID=$(grep ceTaskId "$META_PATH" | cut -d'=' -f2)

          if [ -z "$TASK_ID" ]; then
            echo "‚ùå N√£o foi poss√≠vel encontrar ceTaskId. A an√°lise pode ter falhado."
            exit 1
          fi

          STATUS="PENDING"
          while [ "$STATUS" != "SUCCESS" ] && [ "$STATUS" != "FAILED" ]; do
            echo "‚è≥ Status da an√°lise: $STATUS"
            sleep 5
            STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
          done

          if [ "$STATUS" != "SUCCESS" ]; then
            echo "‚ùå A an√°lise falhou no SonarCloud (status: $STATUS)"
            exit 1
          fi

          ANALYSIS_ID=""
          while [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; do
            echo "‚è≥ Aguardando analysisId da task..."
            sleep 3
            ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          done

          echo "üîç Validando Quality Gate para an√°lise $ANALYSIS_ID..."

          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
            | jq -r '.projectStatus.status')

          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo -e "\n‚ùå Quality Gate falhou! Detalhes:"
            curl -s -u $SONAR_TOKEN: \
              "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" \
              | jq -r '.projectStatus.conditions[] | select(.status != "OK") | "- Crit√©rio: \(.metric)\n  Valor atual: \(.actual // \"n/a\")\n  Status: \(.status)\n"'
            echo -e "\nüîó Ver detalhes: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"
            exit 1
          else
            echo -e "\n‚úÖ Quality Gate aprovado."
          fi

      - name: Compilar TypeScript
        run: npm run build

      - name: Arquivar artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout c√≥digo-fonte
        uses: actions/checkout@v4

      - name: Baixar artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Configurar AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Fazer login no Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY }}

      - name: Construir e enviar imagem Docker para o ECR
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.AWS_ECR_REPOSITORY }}:latest

      - name: Configurar kubectl e acessar cluster EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region us-east-1

      - name: Instalar Helm
        uses: azure/setup-helm@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fazer deploy com Helm
        run: |
          helm upgrade --install fiap-fastfood ./deployment/fiap-fast-food \
            --namespace default \
            --set image.repository=${{ secrets.AWS_ECR_REPOSITORY }} \
            --set image.tag=latest

      - name: Verificar status dos pods
        run: kubectl get pods -o wide